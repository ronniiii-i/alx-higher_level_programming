Using ``BaseGeometry``
----------------------

First import ``BaseGeometry``

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it
===========

Define it:
    >>> bg = BaseGeometry()

Call area function:
    >>> try:
    ...     print(bg.area())
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

Call function with valid ``value`` values:
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

``value`` as string:
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

``value`` is 0:
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

``value`` is negative:
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

``value`` is undefined:
    >>> try:
    ...     bg.integer_validator("distance",)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

``value`` is not a number
==========================

``value`` is None:
    >>> try:
    ...     bg.integer_validator("distance", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer

``value`` is float:
    >>> try:
    ...     bg.integer_validator("distance", 4.55)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer

``value`` is list:
    >>> try:
    ...     bg.integer_validator("distance", [])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer

``value`` is tuple:
    >>> try:
    ...     bg.integer_validator("distance", (4,))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer


``value`` is boolean
=====================
False:
    >>> try:
    ...     bg.integer_validator("distance", False)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0
True:
    >>> try:
    ...     bg.integer_validator("distance", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))


``value`` is dict:
    >>> try:
    ...     bg.integer_validator("distance", {})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] distance must be an integer