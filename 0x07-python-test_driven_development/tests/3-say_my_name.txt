Using ``say_my_name(first_name, last_name="")``
-----------------------------------------------

Parameter "last_name" is defaulted to an empty string
Makes sure the parameters are type str
Prints concatenated string
Import function

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Now use it:

Basic Usage
===========

Both values are provided:
    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White

Only first name is given:
    >>> say_my_name("Bob")
    My name is Bob 


Tests
=====

First name is not string:
    >>> try:
    ...     say_my_name(12, "White")
    ... except Exception as e:
    ...     print(e)
    first_name must be a string

    >>> try:
    ...     say_my_name(12)
    ... except Exception as e:
    ...     print(e)
    first_name must be a string

    >>> try:
    ...     say_my_name(("ron", "hi"))
    ... except Exception as e:
    ...     print(e)
    first_name must be a string

First name is None:
    >>> try:
    ...     say_my_name(None)
    ... except Exception as e:
    ...     print(e)
    first_name must be a string

First name is nonexistent:
    >>> try:
    ...     say_my_name()
    ... except Exception as e:
    ...     print(e)
    say_my_name() missing 1 required positional argument: 'first_name'

Last name is not string:
    >>> try:
    ...     say_my_name("John", 12)
    ... except Exception as e:
    ...     print(e)
    last_name must be a string

    >>> try:
    ...     say_my_name("John", [])
    ... except Exception as e:
    ...     print(e)
    last_name must be a string

    >>> try:
    ...     say_my_name("John", ("ron", "hi"))
    ... except Exception as e:
    ...     print(e)
    last_name must be a string

Last name is None:
    >>> try:
    ...     say_my_name("John", None)
    ... except Exception as e:
    ...     print(e)
    last_name must be a string
